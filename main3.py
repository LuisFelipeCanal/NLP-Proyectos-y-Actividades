import pandas as pd
import streamlit as st
from datetime import datetime
from copy import deepcopy
#from groq import Groq
#import openai
from openai import OpenAI
import csv
import re
import pytz
import json
import logging
# Configura el logger
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
# Inicializar el cliente de Groq con la clave API
#client = Groq(api_key=st.secrets["GROQ_API_KEY"])
client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

# Configuraci√≥n inicial de la p√°gina
st.set_page_config(page_title="Saz√≥nBot", page_icon=":pot_of_food:")
st.title("üç≤ Saz√≥nBot")

# Mensaje de bienvenida
intro = """¬°Bienvenido a Saz√≥n Bot, el lugar donde todos tus antojos de almuerzo se hacen realidad!
Comienza a chatear con Saz√≥n Bot y descubre qu√© puedes pedir, cu√°nto cuesta y c√≥mo realizar tu pago. ¬°Estamos aqu√≠ para ayudarte a disfrutar del mejor almuerzo!"""
st.markdown(intro)


# Cargar el men√∫ desde un archivo CSV
def load(file_path):
    """Cargar el men√∫ desde un archivo CSV con columnas Plato, Descripci√≥n y Precio."""
    load = pd.read_csv(file_path)
    return load

# Cargar los distritos de reparto desde un archivo CSV
#def load_distritos(file_path):
 #   """Cargar los distritos de reparto desde un archivo CSV."""
  #  distritos = pd.read_csv(file_path)
   # return distritos

def format_menu(menu):
    if menu.empty:
        return "No hay platos disponibles."

    else:
        # Encabezados de la tabla
        table = "| **Plato** | **Descripci√≥n** | **Precio** |\n"
        table += "|-----------|-----------------|-------------|\n"  # L√≠nea de separaci√≥n
        
        # Filas de la tabla
        for idx, row in menu.iterrows():
            table += f"| {row['Plato']} | {row['Descripci√≥n']} | S/{row['Precio']:.2f} |\n"
        
        return table


# Mostrar el men√∫ con descripciones
def display_menu(menu):
    """Mostrar el men√∫ con descripciones."""
    menu_text = "Aqu√≠ est√° nuestra carta:\n"
    for index, row in menu.iterrows():
        menu_text += f"{row['Plato']}: {row['Descripci√≥n']} - {row['Precio']} soles\n"
    return menu_text

# Mostrar los distritos de reparto
def display_distritos(distritos):
    """Mostrar los distritos de reparto disponibles."""
    distritos_text = "Los distritos de reparto son:\n"
    for index, row in distritos.iterrows():
        distritos_text += f"**{row['Distrito']}**\n"
    return distritos_text

def display_postre(postre):
    """Mostrar el men√∫ con descripciones."""
    postre_text = "Aqu√≠ est√° lista de postres:\n"
    for index, row in postre.iterrows():
        postre_text += f"{row['Postres']}: {row['Descripci√≥n']} - {row['Precio']} soles\n"
    return postre_text

def display_bebida(bebida):
    """Mostrar el men√∫ con descripciones."""
    bebida_text = "Aqu√≠ est√° lista de bebidas:\n"
    for index, row in bebida.iterrows():
        bebida_text += f"{row['bebida']}: {row['descripcion']} - {row['precio']} soles\n"
    return bebida_text
		
# Cargar el men√∫ y distritos
menu = load("carta.csv")
distritos = load("distritos.csv")
bebidas= load("Bebidas.csv")
postres= load("Postres.csv")

def display_confirmed_order(order_details):
    """Genera una tabla en formato Markdown para el pedido confirmado."""
    table = "| **Plato** | **Cantidad** | **Precio Total** |\n"
    table += "|-----------|--------------|------------------|\n"
    for item in order_details:
        table += f"| {item['Plato']} | {item['Cantidad']} | S/{item['Precio Total']:.2f} |\n"
    table += "| **Total** |              | **S/ {:.2f}**      |\n".format(sum(item['Precio Total'] for item in order_details))
    return table

##Pendiente


def get_system_prompt(menu, distritos):
    """Define el prompt del sistema para el bot de Saz√≥n incluyendo el men√∫ y distritos."""
    lima_tz = pytz.timezone('America/Lima')  # Define la zona horaria de Lima
    hora_lima = datetime.now(lima_tz).strftime("%Y-%m-%d %H:%M:%S")  # Obtiene la hora actual en Lima
    system_prompt = f"""
    Eres el bot de pedidos de Saz√≥n, amable y servicial. Ayudas a los clientes a hacer sus pedidos y siempre confirmas que solo pidan platos que est√°n en el men√∫ oficial. Aqu√≠ tienes el men√∫ para mostr√°rselo a los clientes:\n{display_menu(menu)}\n
    Tambi√©n repartimos en los siguientes distritos: {display_distritos(distritos)}.\n
    Primero, saluda al cliente y ofr√©cele el men√∫. Aseg√∫rate de que el cliente solo seleccione platos que est√°n en el men√∫ actual y expl√≠cales que no podemos preparar platos fuera del men√∫.
    El cliente puede indicar la cantidad en texto o en n√∫meros.
    **IMPORTANTE: Validaci√≥n de cantidad solicitada**
    - Si la cantidad solicitada est√° en el rango de 1 a 100 (inclusive), acepta el pedido sin mostrar advertencias.
    - Si la cantidad solicitada es mayor que 100, muestra el siguiente mensaje:
      "Lamento informarte que el l√≠mite m√°ximo de cantidad por producto es de 100 unidades. Por favor, reduce la cantidad para procesar tu pedido."
    
    Pregunta si desea recoger su pedido en el local o si prefiere entrega a domicilio. 
    Si elige entrega, preg√∫ntale al cliente a que distrito desea que se le envie su pedido, confirma que el distrito est√© dentro de las zonas de reparto y verifica el distrito de entrega con el cliente.
    Si el pedido es para recoger, invitalo a acercarse a nuestro local ubicado en UPCH123.
    
    Usa solo espa√±ol peruano en tus respuestas, evitando palabras como "prefer√≠s" y empleando "prefiere" en su lugar.
    
    Antes de continuar, confirma que el cliente haya ingresado un m√©todo de entrega v√°lido. Luego, resume el pedido en la siguiente tabla:\n
    | **Plato**      | **Cantidad** | **Precio Total** |\n
    |----------------|--------------|------------------|\n
    |                |              |                  |\n
    | **Total**      |              | **S/ 0.00**      |\n
    
    Aclara que el monto total del pedido no acepta descuentos ni ajustes de precio.
    
    Pregunta al cliente si quiere a√±adir una bebida o postre. 
    - Si responde bebida, mu√©strale √∫nicamente la carta de bebidas {display_bebida(bebidas)}.
    - Si responde postre, mu√©strale solo la carta de postres {display_postre(postres)}.
    
    Si el cliente agrega postres o bebidas, incorp√≥ralos en la tabla de resumen como un plato adicional y calcula el monto total nuevamente con precisi√≥n.
    
    Al final, preg√∫ntale al cliente: "¬øEst√°s de acuerdo con el pedido?" y espera su confirmaci√≥n. 
    Una vez que el cliente confirme el pedido, pide al cliente el metodo de pago (tarjeta de cr√©dito, efectivo u otra opci√≥n disponible). Verifica que haya ingresado un metodo de pago antes de continuar.
    Luego, de confirmar el metodo de pago, registra la hora actual de Per√∫ como el timestamp {hora_lima} de la confirmaci√≥n. 
     
    El pedido confirmado ser√°:\n
    {display_confirmed_order([{'Plato': '', 'Cantidad': 0, 'Precio Total': 0}])}\n
    
    Recuerda siempre confirmar que el pedido, el m√©todo de pago y el lugar de entrega del pedido est√©n completos y correctos antes de registrarlo.
    """
    return system_prompt.replace("\n", " ")
   
def extract_order_json(response):
    """Extrae el pedido confirmado en formato JSON desde la respuesta del bot solo si todos los campos tienen valores completos."""
    prompt = f"""
    	Extrae √∫nicamente la informaci√≥n visible y expl√≠cita del pedido confirmado de la siguiente respuesta: '{response}'.
    	Si el pedido est√° confirmado en el texto, devuelve el resultado en formato JSON con las siguientes claves:
    	- 'Platos': una lista de platos donde cada plato incluye su cantidad y precio_total.
    	- 'Total': el monto total del pedido.
    	- 'metodo de pago': el m√©todo de pago elegido por el cliente.
    	- 'lugar_entrega': el lugar de entrega en la direcci√≥n del local o en el distrito indicado por el cliente.
    	- 'timestamp_confirmacion': la marca de tiempo del momento en que se confirma el pedido.

    	Si alg√∫n campo como 'metodo de pago', 'lugar_entrega' o 'timestamp_confirmacion' no aparece expl√≠citamente en la respuesta del cliente, asigna el valor null a ese campo.

    	Si el pedido no est√° confirmado expl√≠citamente en la respuesta, devuelve un diccionario vac√≠o.
    	No generes, interpretes, ni asumas valores que no est√©n presentes en la respuesta."""
    #prompt = f"Extrae la informaci√≥n del pedido confirmado solo de la siguiente respuesta: '{response}'. Si el pedido est√° confirmado, proporciona una salida en formato JSON con las siguientes claves: 'Platos' (contiene los platos, cada uno con su cantidad y precio_total), 'Total', 'metodo de pago', 'lugar_entrega', y 'timestamp_confirmacion'. Si alg√∫n campo como 'metodo de pago' o 'lugar_entrega'o 'timestamp_confirmacion' no est√° presente, as√≠gnale el valor null. Si el pedido no est√° confirmado, devuelve un diccionario vacio."
    #prompt = f"Extrae la informaci√≥n del pedido de la siguiente respuesta: '{response}'. Si el pedido est√° confirmado proporciona una salida en formato JSON con las claves: Platos(contine los platos con la cantidad y precio_total),Total,metodo de pago,lugar_entrega y timestamp_confirmacion. Si el pedido no est√° confirmado devuelve una diccionario vacio."

    extraction = client.chat.completions.create(
        messages=[
            {"role": "system", "content": "Eres un asistente que extrae el pedido confirmado en JSON. Responde solo con un JSON o un diccionario vac√≠o."},
            {"role": "user", "content": prompt}
        ],
        model="gpt-3.5-turbo",
        temperature=0.2,
        max_tokens=300,
        top_p=1,
        stop=None,
        stream=False,
    )
#"gemma2-9b-it"
    response_content = extraction.choices[0].message.content
    
    # Intenta cargar como JSON
    try:
        order_json = json.loads(response_content)
        st.markdown(order_json)
        st.markdown(type(order_json))
        # Verifica si el JSON es un diccionario
        if isinstance(order_json, dict):
            if all(order_json[key] not in (None, '', [], {}) for key in order_json):
                return order_json
            else:
                print("Advertencia: Hay claves con valores nulos o vac√≠os en el pedido.")
                return {}
            # Verifica que todas las claves en order_json tengan valores no nulos
            #return order_json if order_json else {}
        
        # Si el JSON es una lista, devuelves un diccionario vac√≠o o manejas la lista de otro modo
        elif isinstance(order_json, list):
            print("Advertencia: Se recibi√≥ una lista en lugar de un diccionario.")
            return {}
        
        # Si no es ni lista ni diccionario, retorna un diccionario vac√≠o
        else:
            return {}
    
    except json.JSONDecodeError:
        # Manejo de error en caso de que el JSON no sea v√°lido
        return {}

def generate_response(prompt, temperature=0.1,max_tokens=1000):
    """Enviar el prompt a Groq y devolver la respuesta con un l√≠mite de tokens."""
    st.session_state["messages"].append({"role": "user", "content": prompt})

    completion = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=st.session_state["messages"],
        temperature=temperature,
        max_tokens=max_tokens,
        stream=False,
    )
    response = completion.choices[0].message.content
    st.session_state["messages"].append({"role": "assistant", "content": response})
    # Extraer JSON del pedido confirmado
    order_json = extract_order_json(response)
    st.markdown(order_json)
    st.markdown(type(order_json))
    logging.info(json.dumps(order_json, indent=4) if order_json else '{}')
    return response

# Ajustar el tono del bot
def adjust_tone(tone="friendly"):
    """Ajustar el tono del bot seg√∫n las preferencias del cliente."""
    if tone == "formal":
        st.session_state["tone"] = "formal"
        return "Eres un asistente formal y educado."
    else:
        st.session_state["tone"] = "friendly"
        return "Eres un asistente amigable y relajado."

        
initial_state = [
    {"role": "system", "content": get_system_prompt(menu,distritos)},
    {
        "role": "assistant",
        "content": f"¬øQu√© te puedo ofrecer?\n\nEste es el men√∫ del d√≠a:\n\n{format_menu(menu)}",
    },
]


if "messages" not in st.session_state:
    st.session_state["messages"] = deepcopy(initial_state)

# eliminar conversaci√≥n
clear_button = st.button("Eliminar conversaci√≥n", key="clear")
if clear_button:
    st.session_state["messages"] = deepcopy(initial_state)

# Display chat messages from history on app rerun
for message in st.session_state.messages:
    if message["role"] == "system":
        continue
    elif message["role"] == "assistant":
        with st.chat_message(message["role"], avatar="üë®‚Äçüç≥"):
            st.markdown(message["content"])
    else:
        with st.chat_message(message["role"], avatar="üë§"):
            st.markdown(message["content"])

if prompt := st.chat_input():
    with st.chat_message("user", avatar="üë§"):
        st.markdown(prompt)

    output = generate_response(prompt)
    with st.chat_message("assistant", avatar="üë®‚Äçüç≥"):
        st.markdown(output)
    
